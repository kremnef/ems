importClass(Packages.java.util.Calendar);

function createNewVersionDocument(contentId, languageCode) {
    var userData = getLoggedInUser();
    var documentVersion = cocoon.createObject("ru.strela.ems.core.model.DocumentVersion");
    documentVersion.setContentId(contentId);
    documentVersion.setLanguageCode(languageCode);

    var dateTime = Calendar.getInstance().getTime();
    documentVersion.setCreatedDateTime(dateTime);
    documentVersion.setModifiedDateTime(dateTime);
    documentVersion.setIsLastVersion(true);
    documentVersion.setState("draft");
    documentVersion.setVersionModifierId(userData.customer.getId());
    var documentVersionService = cocoon.getComponent("documentVersionService");
    var lastVersion = documentVersionService.getLastVersion(contentId, languageCode);
    documentVersion.setVersion(lastVersion);

    documentVersionService.saveDocumentVersion(documentVersion);
    var documentService = cocoon.getComponent("documentService");
    return   documentService.getDocumentByNaturalId(contentId, languageCode);
}


function editDocument(form) {
    print("--------- enter function editDocument ---------");

    var showFormURI = cocoon.parameters.showFormURI;
    var servletPath = cocoon.parameters.servletPath;
    var blockPrefix = cocoon.parameters.blockPrefix;
    var inner = cocoon.parameters.inner;
    print("showFormURI: " + showFormURI + " servletPath: " + servletPath + " blockPrefix: " + blockPrefix + " inner: " + inner);

    importClass(Packages.ru.tastika.tools.util.Utilities);
    var contentId = Utilities.parseStringToInteger(cocoon.request.getParameter("id"));
    print("contentId from request: " + contentId);
    var languageCode = cocoon.request.getParameter("languageCode");
    print("languageCode from request: " + languageCode);

    var comment = cocoon.request.getParameter("comment");
    print("comment from request: " + comment);
    var versionObj = cocoon.request.getParameter("version");
    print("versionObj from request: " + versionObj);


    var documentService = cocoon.getComponent("documentService");
    var documentVersionService = cocoon.getComponent("documentVersionService");
//    todo: заменить на уже загруженный объект из сессии


    var content;
    if (cocoon.session.getAttribute("content") != null) {

        content = cocoon.session.getAttribute("content");
        print("content взят из сессии");
    } else {
        var contentService = cocoon.getComponent("contentService");
        content = contentService.getContent(contentId);
        cocoon.releaseComponent(contentService);
        print("content загружен из базы данных");
    }
    if (content == null) {
        print("content не существует, приступаем к созданию");
        cocoon.redirectTo("Content-create?parentId=0");
        return;
    }

    var version = Utilities.parseStringToInteger(versionObj);
//    print("version:" + version);
    var formLocale = getLocale();
//    print("formLocale:" + formLocale);
    if (languageCode == null) {
        languageCode = getLocale();
        print("переназначаем languageCode через formLocale:" + languageCode);
    }

    var document = documentService.getDocumentByNaturalId(content.getId(), languageCode);
    if (document == null) {
        print("document не существует, приступаем к созданию новой версии");
        document = createNewVersionDocument(content.getId(), languageCode);
    }
    if (document.getId() > 0) {
        var documentVersion = documentVersionService.getDocumentVersion(document.getId());


        if (version != documentVersion.getVersion()) {
            version = documentVersion.getVersion();
            cocoon.request.setAttribute('version', version);
        }


        /*var fileObjects = document.getFileObjects();
         for (var iterator = fileObjects.iterator(); iterator.hasNext();) {
         var fileObject = iterator.next();
         print("fileObject.position: "+fileObject.position);
         }*/
// add existing ids

        var fileSystemObjects = document.getFileSystemObjects();

        var fileSystemObjectsIds = new java.util.HashSet();
        for (var iterator = fileSystemObjects.iterator(); iterator.hasNext();) {
            var fileSystemObject = iterator.next();
            print("fileSystemObject!!!:" + fileSystemObject.getId());
            fileSystemObjectsIds.add(new java.lang.Integer(fileSystemObject.id));
        }


    }

    print("устанавливаем в сессию excludedIds-formLocale-languageCode");
    cocoon.session.setAttribute("excludedIds", fileSystemObjectsIds);
    print("-установили :" + cocoon.session.getAttribute('excludedIds'));
    cocoon.session.setAttribute("documentTypeId", content.getDocumentTypeId());
    cocoon.session.setAttribute("document", document);
    cocoon.session.setAttribute("formLocale", formLocale);
    cocoon.session.setAttribute("languageCode", languageCode);
    cocoon.session.setAttribute("contentId", contentId);
    var documentActionState = cocoon.session.getAttribute('contentActionState');

    form.load(document);
    print("загрузили document в форму");
    importClass(Packages.org.apache.cocoon.forms.formmodel.WidgetState);

    form.setAttribute('formName', 'documentForm');
//todo: вынести в ajax по запросу
    var documentVersions = documentVersionService.getAllVersions(contentId);
    print("загрузили из базы все версии");
    var userData = getLoggedInUser();

    form.showForm(showFormURI, {
        "documentActionState": documentActionState,
        "contentId": contentId,
        "version": version,
        "servletPath": servletPath,
        "inner": inner,
        "blockPrefix": blockPrefix,
        "userData": userData,
        "documentVersions": documentVersions,
        "fileSystemObjects": fileSystemObjects,
        "fileSystemObjectsIds": fileSystemObjectsIds
    });

    if (cocoon.request.getParameter("newFiles") != null) {
        var newFiles = cocoon.request.getParameter("newFiles");
    }

    // *** Save form to Document
    print("Save form to Document & documentVersion");
    form.save(document);
    print("cocoon.session.getAttribute(languageCode)" + cocoon.session.getAttribute("languageCode"));
    /* if(cocoon.session.getAttribute("languageCode")== null){
     var newLocale = form.getChild("formLocale").getValue();
     print("-!!-!_!- NewLocale "+newLocale);
     cocoon.session.setAttribute("languageCode", newLocale);
     }*/

    // *** Save DocumentVersion to DB
    print("saveDocumentVersion to DB");
    var dateTime = Calendar.getInstance().getTime();

    documentVersion.setModifiedDateTime(dateTime);
    documentVersion.setVersionModifierId(userData.customer.getId());
    documentVersionService.saveDocumentVersion(documentVersion);

    print("fileObjects0" + document.getFileSystemObjects());


//Не влияет на сохранение документов
//    var fileSystemObjects = document.getFileSystemObjects();
//    var fileSystemObjectsIds = new java.util.HashSet();
//    for (var iterator = fileSystemObjects.iterator(); iterator.hasNext();) {
//        print("Edit fileSystemObject!!!:" + fileSystemObject);
//        var fileSystemObject = iterator.next();
//        fileSystemObjectsIds.add(new java.lang.Integer(fileSystemObject.id));
//    }
// *** Save Document to DB

//    saveDocument(document,contentId)
//todo: убрать сохраение, заменить на корректную передачу документа в сессию
    documentService.saveDocument(document);
    cocoon.session.setAttribute("document", document);
    cocoon.session.removeAttribute("excludedIds");

    /*var newFormLocale = cocoon.session.getAttribute("formLocale");
     if (newFormLocale != null){
     languageCode = newFormLocale;
     }*/
//  todo: возможно излишнее
    var documentTypeId = content.getDocumentTypeId();
    print("session setAttribute documentTypeId" + documentTypeId);
    cocoon.session.setAttribute("documentTypeId", documentTypeId);

    print("session удаляем аттрибуты");
//    cocoon.session.removeAttribute("document");
    cocoon.session.removeAttribute("documentTypeId");
//    cocoon.session.removeAttribute("languageCode");
    cocoon.session.removeAttribute("formLocale");
    cocoon.releaseComponent(documentVersionService);
    if (documentActionState == 'create') {
        print("documentActionState" + documentActionState);
        cocoon.redirectTo(getRedirectUrl(contentId));
    } else {
        print("documentActionState" + documentActionState);
        cocoon.sendStatus(200);
    }

}


function createDocument(form) {
    print("--------- enter function createDocument ---------");
    var version = Utilities.parseStringToInteger(cocoon.request.getParameter("version"));

    var showFormURI = cocoon.parameters.showFormURI;
    var servletPath = cocoon.parameters.servletPath;
    var blockPrefix = cocoon.parameters.blockPrefix;
    var inner = cocoon.parameters.inner;
    print("showFormURI: " + showFormURI + " servletPath: " + servletPath + " blockPrefix: " + blockPrefix + " inner: " + inner);

    importClass(Packages.ru.tastika.tools.util.Utilities);
//    var parentId = cocoon.session.getAttribute("contentParentId");


    var documentService = cocoon.getComponent("documentService");
    var documentVersionService = cocoon.getComponent("documentVersionService");


    var formLocale = getLocale();
    print("formLocale:" + formLocale);
//    if (languageCode == null) {
    var languageCode = getLocale();
    print("переназначаем languageCode через formLocale:" + languageCode);
//    }


    var documentModel = cocoon.createObject("ru.strela.ems.core.model.Document");
    var fileSystemObjectsIds = new java.util.HashSet();
    cocoon.session.setAttribute("formLocale", formLocale);
    cocoon.session.setAttribute("languageCode", languageCode);

    var documentActionState = cocoon.session.getAttribute('contentActionState');

    form.load(documentModel);
    print("загрузили document в форму");
    importClass(Packages.org.apache.cocoon.forms.formmodel.WidgetState);

    form.setAttribute('formName', 'documentForm');
    var userData = getLoggedInUser();

    form.showForm(showFormURI, {
        "documentActionState": documentActionState,
//        "contentId": contentId,
//        "version": version,
        "servletPath": servletPath,
        "inner": inner,
        "blockPrefix": blockPrefix,
        "userData": userData,
//        "documentVersions": documentVersions,
//        "fileSystemObjects": fileSystemObjects,
        "fileSystemObjectsIds": fileSystemObjectsIds
    });

    if (cocoon.request.getParameter("newFiles") != null) {
        var newFiles = cocoon.request.getParameter("newFiles");
    }

    // *** Save form to Document
    print("Save form to Document & documentVersion");
    form.save(documentModel);

    print("cocoon.session.getAttribute(languageCode)" + cocoon.session.getAttribute("languageCode"));

    var content = cocoon.session.getAttribute('lastContent');
    cocoon.session.removeAttribute('lastContent');
    var contentId = 0;
    if (content != null) {
        contentId = content.getId();
    }

//     && isFolder != 'true'

    if (contentId > 0) {


        print("document не существует, приступаем к созданию новой версии");
        var document = createNewVersionDocument(content.getId(), languageCode);


        if (document.getId() > 0) {
            var documentVersion = documentVersionService.getDocumentVersion(document.getId());

            if (version != documentVersion.getVersion()) {
                version = documentVersion.getVersion();
                cocoon.request.setAttribute('version', version);
            }

// add existing ids
            var fileSystemObjects = documentModel.getFileSystemObjects();
            document.setFileSystemObjects(fileSystemObjects);


            for (var iterator = fileSystemObjects.iterator(); iterator.hasNext();) {
                var fileSystemObject = iterator.next();
                print("fileSystemObject!!!:" + fileSystemObject.getId());
                fileSystemObjectsIds.add(new java.lang.Integer(fileSystemObject.id));
            }
            print("устанавливаем в сессию excludedIds-formLocale-languageCode");
            cocoon.session.setAttribute("excludedIds", fileSystemObjectsIds);
            print("-установили :" + cocoon.session.getAttribute('excludedIds'));

        }
        cocoon.session.setAttribute("documentTypeId", content.getDocumentTypeId());
        cocoon.session.setAttribute("document", document);

    }
    // *** Save DocumentVersion to DB
    print("saveDocumentVersion to DB");
    var dateTime = Calendar.getInstance().getTime();

    documentVersion.setModifiedDateTime(dateTime);
    documentVersion.setVersionModifierId(userData.customer.getId());
    documentVersionService.saveDocumentVersion(documentVersion);


    documentService.saveDocument(document);
    cocoon.session.setAttribute("document", document);
    cocoon.session.removeAttribute("excludedIds");


//  todo: возможно излишнее
    var documentTypeId = content.getDocumentTypeId();

    print("session setAttribute documentTypeId" + documentTypeId);
    cocoon.session.setAttribute("documentTypeId", documentTypeId);

    print("session удаляем аттрибуты");
    cocoon.session.removeAttribute("document");
    cocoon.session.removeAttribute("documentTypeId");
    cocoon.session.removeAttribute("languageCode");
    cocoon.session.removeAttribute("formLocale");
    cocoon.releaseComponent(documentVersionService);

    cocoon.disposeObject(document);

    print("documentActionState" + documentActionState);
    cocoon.sendPage("content-edit-url", {url: getRedirectUrl(contentId)});

}

function getRedirectUrl(contentId) {
    print("cocoon.session.getAttribute(languageCode)2" + cocoon.session.getAttribute("languageCode"));
    var sessionChangedLanguageCode = cocoon.session.getAttribute("languageCode");
//        var contentId = cocoon.session.getAttribute("contentId");
    var languageCode;
    var url = "Content-edit?id=" + contentId;

    if (sessionChangedLanguageCode != null) {
        print("sessionChangedLanguageCode" + sessionChangedLanguageCode);
        languageCode = sessionChangedLanguageCode;
    }
    if (languageCode != null) {
        url += '&languageCode=' + languageCode;
    }
    /*if (version > 0) {
     url += '&version=' + version;
     }*/

    print("url: " + url);
//            displayURI = url;
    return url;
}
function saveDocument(document, contentId) {
    print("--------- enter function saveDocument to DB ---------");
    print("docId" + document.getId());
    print("fileObjects" + document.getFileSystemObjects());

    var documentService = cocoon.getComponent("documentService");
    documentService.saveDocument(document);
    cocoon.releaseComponent(documentService);
    cocoon.disposeObject(document);


//             cocoon.sendStatus(200);
//            cocoon.redirectTo(url);

//            cocoon.sendPage(displayURI, {
//                "document": document,
//                "xmlForm":xmlForm
//            });
    print("--------- exit function saveDocument ---------");
}

function loadXMLSource(contentId, languageCode) {
    print("--------- enter function loadXMLSource ---------");
    var documentService = cocoon.getComponent("documentService");
    var document = documentService.getDocumentByNaturalId(contentId, languageCode);
//        var xml = document != null ? document.getXML() : null;
    print("--------- exit function loadXMLSource ---------");
    return document;
}


function reloadXMlForm(languageCode) {
    print("--------- enter function reloadXMlForm DocumentTypeForm---------");
    print("as function param:" + languageCode);
    print("as request:" + cocoon.request.getParameter("languageCode"));
    print("as session:" + cocoon.session.getAttribute("languageCode"));
    var StringContentId = cocoon.session.getAttribute("contentId");
    importClass(Packages.ru.tastika.tools.util.Utilities);
    if (languageCode == null) {
        languageCode = cocoon.session.getAttribute("languageCode");
    }

    var inner = cocoon.parameters.inner;

    importClass(Packages.ru.tastika.tools.util.Utilities);
    var contentId = Utilities.parseStringToDouble(StringContentId);
    var documentTypeId = cocoon.session.getAttribute("documentTypeId");


    var documentTypeService = cocoon.getComponent("documentTypeService");
    if (documentTypeId > 0) {
        var currentDocumentType = documentTypeService.getDocumentType(documentTypeId);
        cocoon.releaseComponent(documentTypeService);
    } else {
        print("error!!!+documentTypeId: " + documentTypeId);
    }


    var document = cocoon.session.getAttribute("document");
    var documentService = cocoon.getComponent("documentService");
    if (languageCode == null || document == null) {
        print("!!!! Снова грузим документ:!!!!!!");
        print("as languageCode:" + languageCode);
        print("as document:" + document);
//        document = loadXMLSource(contentId,languageCode);
        document = documentService.getDocumentByNaturalId(contentId, languageCode);
    }


    var currentDocumentTypeName = "";
    if (currentDocumentType != null) {
        currentDocumentTypeName = currentDocumentType.getName();
        var definitionURI = "context://DocumentType/forms/" + currentDocumentTypeName + "/" + currentDocumentTypeName + "_definition.xml";
        var bindingURI = "context://DocumentType/forms/" + currentDocumentTypeName + "/" + currentDocumentTypeName + "_binding.xml";
        var showFormURI = currentDocumentTypeName + "_template-pipeline";
        var displayURI = currentDocumentTypeName + "_success-pipeline";
        var form = new Form(definitionURI);
        var xml = document != null ? document.getXML() : null;
        form.createBinding(bindingURI);


        if (xml != null) {
            form.load(xml);
        }
        var formData = {
            "inner": inner,
            "displayURI": displayURI,
            "documentTypeId": documentTypeId
        };
        form.setAttribute('formName', 'dynamicForm');
//        form.setAttribute('ajax', 'true');
        form.showForm(showFormURI, formData);
        if (xml != null) {
            form.save(xml);
        }

        var xmlForm = form.getChild(currentDocumentTypeName);
        var xmlSource = document.setForm(xmlForm);
        document.setXmlSource(xmlSource);
        cocoon.disposeObject(currentDocumentType);


        print("saveDocument to DB");
        print("fileObjects1" + document.getFileSystemObjects());
        document = cocoon.session.getAttribute("document");
        saveDocument(document, contentId);
        cocoon.redirectTo(getRedirectUrl(contentId));
        print("--------- ecit function reloadXMlForm ---------");
    }
    else {
        cocoon.releaseComponent(documentService);
        cocoon.sendStatus(404);
        print(" !!!!!!!!!!!!!function reloadXMlForm 404");
    }

}


/*function editDocumentType() {
 importClass(Packages.ru.tastika.tools.util.Utilities);
 //
 print("editDocumentType start");
 var inner = cocoon.parameters.inner;
 print("inner "+inner);
 var languageCode = cocoon.session.getAttribute("languageCode");
 var document = cocoon.session.getAttribute("document");
 importClass(Packages.ru.tastika.tools.util.Utilities);
 var StringContentId = cocoon.session.getAttribute("contentId");
 var contentId = Utilities.parseStringToDouble(StringContentId);
 var documentTypeId = cocoon.session.getAttribute("documentTypeId");


 //    var documentService = cocoon.getComponent("documentService");
 if (languageCode != null || document == null) {
 document = loadXMLSource(contentId,languageCode);

 }
 var documentTypeService = cocoon.getComponent("documentTypeService");
 if (documentTypeId > 0) {
 var currentDocumentType = documentTypeService.getDocumentType(documentTypeId);
 cocoon.releaseComponent(documentTypeService);
 } else {
 print("error!!!+documentTypeId: " + documentTypeId);
 }

 //    print("editDocumentType start2");
 var currentDocumentTypeName = "";
 if (currentDocumentType != null) {
 currentDocumentTypeName = currentDocumentType.getName();
 var definitionURI = "context://DocumentType/forms/" + currentDocumentTypeName + "/" + currentDocumentTypeName + "_definition.xml";
 var bindingURI = "context://DocumentType/forms/" + currentDocumentTypeName + "/" + currentDocumentTypeName + "_binding.xml";
 var showFormURI = currentDocumentTypeName + "_template-pipeline";
 var displayURI = currentDocumentTypeName + "_success-pipeline";
 var form = new Form(definitionURI);
 var xml = document != null ? document.getXML() : null;
 form.createBinding(bindingURI);

 if (xml != null) {
 form.load(xml);
 }
 var formData = {
 "inner" : inner,
 "displayURI": displayURI,
 "documentTypeId" : documentTypeId
 };
 form.setAttribute('formName', 'dynamicForm');
 form.showForm(showFormURI, formData);
 if (xml != null) {
 form.save(xml);
 }

 var xmlForm = form.getChild(currentDocumentTypeName);
 var xmlSource = document.setForm(xmlForm);
 document.setXmlSource(xmlSource);
 cocoon.disposeObject(currentDocumentType);
 saveDocument(document,contentId);
 //        print("editDocumentType end");
 }
 else {
 cocoon.releaseComponent(documentService);
 cocoon.sendStatus(404);
 print("editDocumentType end 404");
 }

 }*/


//function getDocument(content, languageId, version, comment) {
function getDocument(content, languageCode) {
//    var currentDocument = null;
//    var currentDocumentVersion = null;
//    var lastLanguageVersion = 0;
    var documentService = cocoon.getComponent("documentService");
//    currentDocument =  documentService.getLastVersionDocument(content.getId(),languageId);
    var currentDocument = documentService.getDocumentByNaturalId(content.getId(), languageCode);

    if (currentDocument == null) {
        currentDocument = cocoon.createObject("ru.strela.ems.core.model.Document");
        currentDocument.setLanguageCode(languageCode);
//        currentDocument.setVersion(lastLanguageVersion + 1);
        currentDocument.setContentId(content.getId());
//        currentDocumentVersion.setVersionComment(comment);
        content.getDocuments().add(currentDocument);
        cocoon.disposeObject(currentDocument);
    }
    return currentDocument;
}


function editXML() {

    var definitionURI = "forms/doctype/" + doctype + "_definition.xml";
    var bindingURI = "forms/doctype/" + doctype + "_binding.xml";
    var showFormURI = doctype + "-doctype-template-pipeline";
    var displayURI = doctype + "-doctype-success-pipeline";

    var doctype = cocoon.request.getParameter("doctype");
    var actionState = cocoon.request.getParameter("actionState");


    var documentService = cocoon.getComponent("documentService");
    var document = documentService.getDocument(id);


    var form = new Form(definitionURI);

    //    var actionState;           ;
    //    if (actionState == "edit") {
    var xml = document.getXML();
    form.createBinding(bindingURI);
    form.load(xml);
    //        actionState = "edit";
    //  }
    /*else{
     actionState = "create";
     }*/

    var locale = getLocale();
    form.locale = new java.util.Locale(locale);

    form.showForm(showFormURI, {"actionState": actionState, "displayURI": displayURI});
    //    if (actionState == "edit") {
    form.save(xml);
    //    }

    //    var xmlForm = form.getChild("document").getChild("XML").getChild(doctype);
    var xmlForm = form.getChild(doctype);
    xmlForm = document.setForm(xmlForm);
    document.setXmlSource(xmlForm);
    documentService.saveDocument(document);

    cocoon.releaseComponent(documentService);

    cocoon.sendPage(displayURI, {"document": document, "xmlForm": xmlForm});

}


function viewDocumentById() {
    var displayURI = cocoon.parameters.displayURI;
    var id = parseInt(cocoon.request.getParameter("id"));

    var documentService = cocoon.getComponent("documentService");
    //    var document = documentService.getdocument(id);
    var document = documentService.getDocument(id);

    cocoon.releaseComponent(documentService);

    cocoon.sendPage(displayURI, {"document": document});

}


function string2xml(document) {
    var builder = null;
    var factory = Packages.javax.xml.parsers.DocumentBuilderFactory.newInstance();
    try {
        builder = factory.newDocumentBuilder();
    }
    catch (e) {
        print("Problem getting a parser");
    }
    return builder.parse(new Packages.org.xml.sax.InputSource(new Packages.java.io.StringReader(document)));

}

function getDocumentsByContent() {
    var displayURI = cocoon.parameters.displayURI;
    var id = parseInt(cocoon.parameters.id);
    // get the documentURI parameter from the sitemap which contains the
    // location of the file to be edited

    //    var documentURI = cocoon.parameters["documentURI"];
    //    var formName = cocoon.parameters["formName"];


    var documentService = cocoon.getComponent("documentService");
    var document = documentService.getDocumentsByContentId(id);
    cocoon.releaseComponent(documentService);

    cocoon.sendPage(displayURI, {"document": document});
}

function deleteDocumentById() {
//    var displayURI = cocoon.parameters.displayURI;
//    var id = null;
    var id = parseInt(cocoon.request.getParameter("id"));
    var documentService = cocoon.getComponent("documentService");
    var document = documentService.getDocument(id);
    var contentId = document.getContentId();

    documentService.deleteDocument(document);

    cocoon.releaseComponent(documentService);

    cocoon.redirectTo("Content-edit?id=" + contentId);
}


function listDocument(parentId) {

    print ("!!!_!_!________listDocument()");
    if (!parentId || parentId == 0) {
        parentId = Utilities.parseStringToInteger(cocoon.request.getParameter("parentId"));
    }
    cocoon.redirectTo("Content-list?parentId=" + parentId);
}

