<?xml version="1.0" encoding="UTF-8"?>
<jx:template xmlns:jx="http://apache.org/cocoon/templates/jx/1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <!--todo: Вынести эти пути в настройки сайта -->
    <jx:set var="XSLT_TYPE_FILES_REAL_LOCATION" value="WEB-INF/xslt/types/"/>
    <!--<jx:set var="XSLT_TYPE_FILES_LOCATION" value="${'context:/' + XSLT_TYPE_FILES_REAL_LOCATION}"/>-->
    <jx:set var="XSLT_TYPE_FILES_LOCATION" value="context:/WEB-INF/xslt/types/"/>
    <jx:set var="XSLT_TEMPLATE_FILE_LOCATION" value="context:/WEB-INF/xslt/pages/"/>
    <jx:set var="XSLT_DOCUMENT_TYPE_LOCATION" value="context:/WEB-INF/xslt/types/Content/documentType/"/>
    <!--<jx:set var="XSLT_WIDGET_LOCATION" value="context:/WEB-INF/xslt/widgets/"/>-->
    <jx:set var="XSLT_COMMON_LOCATION" value="context:/WEB-INF/xslt/types/Content/common/"/>
    <jx:set var="XSLT_EXT_LOCATION" value="context:/WEB-INF/xslt/ext/"/>
    <jx:set var="CSS_TYPE_FILES_REAL_LOCATION" value="css/types/"/>
    <jx:set var="CSS_TEMPLATE_FILE_REAL_LOCATION" value="css/pages/"/>
    <jx:set var="CSS_THEME_FILE_REAL_LOCATION" value="css/theme/"/>
    <jx:set var="REAL_ROOT_PATH" value="${cocoon.parameters.realRootPath}"/>
    <jx:set var="SERVLET_PATH" value="${cocoon.parameters.servletPath}"/>
    <!--<!DOCTYPE xsl:stylesheet SYSTEM "dtd/escape.dtd">-->
    <xsl:stylesheet version="1.0"
                    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xmlns:i18n="http://apache.org/cocoon/i18n/2.1" exclude-result-prefixes="xsl i18n jx xsi">

        <jx:set var="makeRedirect" value="${cocoon.parameters.makeRedirect}"/>
        <jx:choose>
            <jx:when test="${makeRedirect == 'true'}">
                <xsl:template match="/">
                    <html>
                        <head>
                            <meta http-equiv="refresh" content="0;URL=${cocoon.parameters.redirect}"/>

                        </head>
                    </html>
                </xsl:template>
            </jx:when>
            <jx:otherwise>

                <!-- Здесь нужно определить как обрабатывать XML
                 1. определить какой тип системного объекта Сontent | Navigation | Folder
                 2. если Content, то найти соот DocumentType с учетом Item | List
                 3. если назначен виджет вызвать соот шаблон-->
                <jx:set var="locale" value="${cocoon.parameters.locale}"/>
                <jx:set var="actions" value="${java.util.TreeSet()}"/>
                <jx:set var="actionXSLTFiles" value="${java.util.ArrayList()}"/>

                <jx:set var="typeActionsString" value="${cocoon.parameters.typesActions}"/>
                <jx:if test="${typeActionsString.length() &gt; 0}">
                    <jx:forEach var="typeAction" items="${cocoon.parameters.typesActions.split(',')}">
                        <!--<jx:message>!!typeAction - <jx:out value="${typeAction}"/></jx:message>-->
                        <!--<jx:out value="${typeAction}"/>-->
                        <jx:set var="typeActionSplitted" value="${typeAction.split(':')}"/>
                        <!--Тип системного объекта-->
                        <jx:set var="objectType" value="${typeActionSplitted.0}"/>

                        <!--Путь к шаблону-->
                        <jx:set var="xsltPath" value="${typeActionSplitted.1}"/>
                        <!--Имя Действия-->
                        <jx:set var="actionName" value="${typeActionSplitted.2}"/>
                        <!--Способ вывода-->
                        <jx:set var="renderLike" value="${typeActionSplitted.3}"/>
                        <!---->
                        <jx:set var="ignored1" value="${actions.add(actionName)}"/>
                        <!--Записываем пути к шаблонам для всех действий-->
                        <jx:choose>
                            <jx:when test="${xsltPath =='widget' and renderLike !='null'}">
                                <jx:set var="ignored"
                                        value="${actionXSLTFiles.add(objectType + '/'+ xsltPath + '/' + objectType + '-' + renderLike + '-' + actionName)}"/>
                            </jx:when>
                            <jx:when test="${xsltPath =='documentType' and renderLike !='null'}">
                                <jx:set var="ignored"
                                        value="${actionXSLTFiles.add(objectType + '/'+ xsltPath + '/' + actionName)}"/>
                            </jx:when>

                            <jx:otherwise>
                                <jx:set var="ignored"
                                        value="${actionXSLTFiles.add(objectType + '/' + objectType + '-' + actionName)}"/>
                            </jx:otherwise>

                        </jx:choose>

                    </jx:forEach>


                    <!--Выбор Common xsl шаблона -->
                    <jx:forEach var="actionItem" items="${actions}">
                        <jx:set var="commonActionFile"
                                value="${java.io.File(REAL_ROOT_PATH + '/' + XSLT_TYPE_FILES_REAL_LOCATION + 'common-' + actionItem + '.xsl')}"/>
                        <jx:if test="${commonActionFile.isFile()}">
                            <xsl:import href="${XSLT_TYPE_FILES_LOCATION + 'common-' + actionItem + '.xsl'}"/>
                        </jx:if>
                    </jx:forEach>

                    <!--Определение пути до шаблона действия-->
                    <jx:forEach var="filePath" items="${actionXSLTFiles}">
                        <!--<jx:out value="${filePath}"/>-->
                        <jx:set var="actionFile"
                                value="${java.io.File(REAL_ROOT_PATH + '/' + XSLT_TYPE_FILES_REAL_LOCATION + filePath + '.xsl')}"/>
                        <jx:if test="${actionFile.isFile()}">
                            <xsl:import href="${XSLT_TYPE_FILES_LOCATION + filePath + '.xsl'}"/>
                        </jx:if>
                    </jx:forEach>


                </jx:if>


                <!--Импорт шаблонов-->
                <!--<jx:comment>#2<xsl:value-of select="//typifiedObject/documentType/name"/></jx:comment>-->

                <!--<xsl:import href="../documentType/NewsAndEvents.xsl"/>-->
                <!--
                    <xsl:import href="../documentType/Work.xsl"/>-->
                <xsl:import href="${XSLT_TYPE_FILES_LOCATION +'functions.xsl'}"/>
                <xsl:import href="${XSLT_EXT_LOCATION+'date.format-date.template.xsl'}"/>
                <!--<xsl:import href="${XSLT_COMMON_LOCATION +'Content-ems-templates-documentTypeImport.xsl'}"/>-->
                <xsl:import href="${XSLT_COMMON_LOCATION +'Content-ems-documentTypeImport.xsl'}"/>

                <jx:set var="documentTypesString" value="${cocoon.parameters.documentTypes}"/>
                <jx:if test="${documentTypesString.length() &gt; 0}">
                    <jx:forEach var="doumentTypeName" items="${cocoon.parameters.documentTypes.split(',')}">
                        <xsl:import href="${XSLT_DOCUMENT_TYPE_LOCATION + doumentTypeName +'.xsl'}"/>
                        <!--<h1>${doumentTypeName}</h1>-->
                    </jx:forEach>
                </jx:if>


                <!--<import-document-type-template/>-->
                <!--Импорт основного шаблона страницы-->

                <jx:set var="xsltTemplateFile" value="${cocoon.parameters.xsltTemplateFile}"/>
                <xsl:import href="${XSLT_TEMPLATE_FILE_LOCATION}${xsltTemplateFile}"/>


                <xsl:output method="html" encoding="UTF-8" omit-xml-declaration="yes"/>

                <xsl:variable name="page" select="'${cocoon.request.getParameter('page')}'"/>
                <xsl:variable name="locale" select="'${locale}'"/>
                <xsl:variable name="servletPath"
                              select="'${Packages.ru.tastika.tools.util.Utilities.removeTrailingSlash(cocoon.request.getServletPath())}'"/>
                <xsl:variable name="blockPrefix"
                              select="'${Packages.ru.strela.ems.tools.ServerTools.getGlobalParameter(\'blockPrefix\')}'"/>

                <jx:set var="scheme" value="${cocoon.request.getScheme()}"/>
                <jx:set var="sitemapPath" value=""/>
                <jx:if test="${scheme != 'servlet'}">
                    <jx:set var="sitemapPath" value="${cocoon.request.getSitemapPath()}"/>
                </jx:if>

                <xsl:variable name="sitemapPath" select="'${sitemapPath}'"/>

                <xsl:template match="/">
                    <html>
                        <head>
                            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
                            <meta name="description">
                                <xsl:attribute name="content">
                                    <xsl:copy>
                                        <xsl:value-of select="/root/systemNode/metaInfo/description"/>
                                        <!--<xsl:apply-templates select="//*[name='description']"/>-->
                                    </xsl:copy>
                                </xsl:attribute>
                            </meta>
                            <meta name="robots" content="index, follow"/>
                            <meta name="viewport" content="width=1016"/>
                            <meta name="keywords">
                                <xsl:attribute name="content">
                                    <xsl:copy>
                                        <xsl:value-of select="/root/systemNode/metaInfo/keywords"/>
                                        <xsl:text>,</xsl:text>
                                        <xsl:for-each select="//tags">
                                            <xsl:value-of select="tag"/>
                                            <xsl:if test="position() != last()">
                                                <xsl:text>,</xsl:text>
                                            </xsl:if>
                                        </xsl:for-each>
                                    </xsl:copy>
                                </xsl:attribute>
                            </meta>

                            <title>
                                <xsl:value-of select="/root/systemNode/objectLabel/label"/>
                                <!--<xsl:text>&#160;|&#160;</xsl:text>-->
                                <xsl:text>-</xsl:text>
                                <xsl:value-of select="/root/systemNode/metaInfo/title"/>
                                <!--    <xsl:choose>
                                        <xsl:when test="$title">
                                            <xsl:value-of select="$title"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="/root/systemNode/name"/>
                                        </xsl:otherwise>
                                    </xsl:choose>-->
                                <xsl:text>|</xsl:text>
                                <xsl:value-of select="/root/systemNode/metaInfo/description"/>
                            </title>


                            <!--CSS apply-->
                            <jx:forEach var="action" items="${actions}">
                                <jx:set var="commonActionCSSFile"
                                        value="${java.io.File(REAL_ROOT_PATH + CSS_TYPE_FILES_REAL_LOCATION + 'common-' + action + '.css')}"/>
                                <jx:if test="${commonActionFile.isFile()}">
                                    <link rel="stylesheet" type="text/css"
                                          href="${SERVLET_PATH}/${CSS_TYPE_FILES_REAL_LOCATION}common-${action}.css"/>
                                </jx:if>
                            </jx:forEach>

                            <jx:forEach var="filePath" items="${actionXSLTFiles}">
                                <jx:set var="actionFile"
                                        value="${java.io.File(REAL_ROOT_PATH + '/' + CSS_TYPE_FILES_REAL_LOCATION + filePath + '.css')}"/>
                                <jx:if test="${actionFile.isFile()}">
                                    <link rel="stylesheet" type="text/css"
                                          href="${SERVLET_PATH}/${CSS_TYPE_FILES_REAL_LOCATION}${filePath}.css"/>
                                </jx:if>
                            </jx:forEach>

                            <jx:set var="tempateCSSFilePath"
                                    value="${CSS_TEMPLATE_FILE_REAL_LOCATION + xsltTemplateFile.replaceAll('\.xsl$', '.css')}"/>

                            <xsl:message>#@#@# ${tempateCSSFilePath}</xsl:message>
                            <jx:set var="tempateCSSFile"
                                    value="${java.io.File(REAL_ROOT_PATH + '/' + tempateCSSFilePath)}"/>

                            <jx:if test="${tempateCSSFile.isFile()}">
                                <link rel="stylesheet" type="text/css" href="${SERVLET_PATH}/${tempateCSSFilePath}"/>
                            </jx:if>

                            <xsl:call-template name="styles"/>
                            <xsl:call-template name="scripts"/>

                        </head>
                        <body>
                            <!--<h1>PAGE= <xsl:value-of select="$page"/></h1>-->
                            <xsl:apply-templates select="/root"/>
                        </body>
                    </html>
                </xsl:template>


            </jx:otherwise>
        </jx:choose>

    </xsl:stylesheet>

</jx:template>
